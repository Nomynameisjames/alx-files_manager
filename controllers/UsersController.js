/*
 * objective =>  create a new user in DB:
 * create a user, you must specify an email and a password
 * If the email is missing, return an error Missing email with a status code 400
 * If the password is missing, return an error Missing password with a status
   code 400
 * If the email already exists in DB, return an error Already exist with a
   status code 400
 * The password must be stored after being hashed in SHA1
 * The endpoint is returning the new user with only the email and the id
   (auto generated by MongoDB) with a status code 201
 * The new user must be saved in the collection users:
    email: same as the value received
    password: SHA1 value of the value received
 */

import sha1 from 'sha1';
import dbClient from '../utils/db';

class UsersController {
  static async postNew(request, response) {
    const { email } = request.body;
    const { password } = request.body;
    if (!email) return response.status(400).send({ error: 'Missing email' });
    if (!password) return response.status(400).send({ error: 'Missing password' });

    const emailExist = await dbClient.users.findOne({ email });
    if (emailExist) return response.status(400).send({ error: 'Already exist' });

    const hashPassword = sha1(password);
    const user = await dbClient.users.insertOne({ email, password: hashPassword });
    return response.status(201).send({ id: user.insertedId, email });
  }

  static async getMe(request, response) {
    const { userId } = request;
    const user = await dbClient.users.findOne({ _id: userId });
    return response.status(200).send({ id: user._id, email: user.email });
  }
}

module.exports = UsersController;
